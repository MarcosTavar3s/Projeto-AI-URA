from streamlit_autorefresh import st_autorefresh
import paho.mqtt.client as mqtt
import random
import streamlit as st
import time
import matplotlib.pyplot as plt
import numpy as np

file_path = 'log.txt'

# Classe principal que controla a interface
class Aplicativo:
    """
    Classe respons√°vel por gerenciar a interface do aplicativo, incluindo a navega√ß√£o e a renderiza√ß√£o das p√°ginas.
    """
    def __init__(self, titulo, mensagem):
        """
        Construtor da classe Aplicativo.
        Inicializa o t√≠tulo e a mensagem, al√©m de configurar o estado inicial da aplica√ß√£o.

        Parameters:
        titulo (str): T√≠tulo da aplica√ß√£o.
        mensagem (str): Mensagem a ser exibida na p√°gina inicial.
        """
        self.titulo = titulo
        self.mensagem = mensagem

        if 'log' not in st.session_state:
            st.session_state.log = []

        if 'pagina' not in st.session_state:
            st.session_state.pagina = 'inicial'

        st.title(self.titulo)  # Exibe o t√≠tulo na p√°gina
        st.write(self.mensagem)  # Exibe uma mensagem na p√°gina

        self.navbar()

    def limpa_estado(self):
        """
        Limpa o estado do log quando o bot√£o de limpar log √© pressionado.

        Exibe um bot√£o de "Limpar Log" na barra lateral. Se pressionado, limpa o hist√≥rico de logs na sess√£o.
        """
        if st.sidebar.button("üóëÔ∏è **Limpar Log**", use_container_width=True):
            st.session_state.log = []  # Limpa o estado do log
            st.success("O estado do log foi limpo!")

    def navbar(self):
        """
        Cria a barra de navega√ß√£o e gerencia as p√°ginas dispon√≠veis no aplicativo.

        Exibe a barra lateral com os bot√µes para navegar entre as p√°ginas da aplica√ß√£o.
        Inclui as p√°ginas 'inicial', 'gr√°ficos' e 'MQTT'.
        """
        st.sidebar.title("Projeto AI URA")

        # Renderiza√ß√£o personalizada para a navega√ß√£o
        paginas = {
            "inicial": "P√°gina Inicial",
            "graficos": "Gr√°ficos",
            "MQTT": "MQTT",
        }

        for key, label in paginas.items():
            if st.session_state.pagina == key:
                st.sidebar.markdown(f"**‚è∫Ô∏é {label}**")  # P√°gina ativa com destaque
            else:
                if st.sidebar.button(label, key=key):
                    st.session_state.pagina = key

        # Adiciona o bot√£o para limpar o estado do log
        self.limpa_estado()

        # Renderizar o conte√∫do com base na p√°gina selecionada
        if st.session_state.pagina == 'inicial':
            self.renderiza_pagina_inicial()
        elif st.session_state.pagina == 'graficos':
            self.renderiza_graficos()
        elif st.session_state.pagina == 'MQTT':
            self.renderiza_mqtt()

    def renderiza_pagina_inicial(self):
        """
        Renderiza a p√°gina inicial, exibindo uma imagem de boas-vindas.

        Exibe uma imagem como introdu√ß√£o √† aplica√ß√£o na p√°gina inicial.
        """
        st.image('IA URA.jpeg')

    def renderiza_graficos(self):
        """ 
        Fun√ß√£o respons√°vel por gerar e exibir gr√°ficos utilizando matplotlib.
        O gr√°fico √© gerado com a fun√ß√£o np.sin() e exibido com o Streamlit usando st.pyplot(fig).
        N√£o h√° par√¢metros de entrada ou valor retornado.
        """
        
        st.write('P√°gina de gr√°ficos')

        # Exemplo de gr√°fico com matplotlib
        x = np.linspace(0, 10, 100)
        y = np.sin(x)

        fig, ax = plt.subplots()
        ax.plot(x, y, label='Seno')
        ax.set_xlabel('Eixo X')
        ax.set_ylabel('Eixo Y')
        ax.set_title('Gr√°fico de Seno')
        ax.legend()

        # Exibindo o gr√°fico no Streamlit
        st.pyplot(fig)

    def renderiza_mqtt(self):
        """ 
        Fun√ß√£o respons√°vel por exibir o hist√≥rico de comandos do MQTT.
        L√™ o arquivo de log e exibe o hist√≥rico de comandos e o √∫ltimo comando enviado.
        Caso ocorra algum erro ao ler o arquivo, uma mensagem de erro √© exibida.
        """
        try:
            # Abre e l√™ o conte√∫do do arquivo
            with open(file_path, "r", encoding="utf-8") as file:
                self.log_mqtt = file.read().split('\n')

                # Remove o caractere '' criado na lista
                st.session_state.log = self.log_mqtt[:-1]

        except FileNotFoundError:
            st.error("Arquivo n√£o encontrado. Verifique o caminho e tente novamente.")
        except Exception as e:
            st.error(f"Ocorreu um erro ao ler o arquivo: {e}")

        # Cria√ß√£o de colunas
        col1, col2 = st.columns([1, 1])

        with col1:
            st.header('Hist√≥rico de comandos')
            if len(st.session_state.log) > 0:
                for log in st.session_state.log[::-1]:
                    st.text(log)
            else:
                st.text('Nenhum comando foi enviado')

        with col2:
            st.header('√öltimo comando enviado')
            if len(st.session_state.log) > 0:
                st.text(st.session_state.log[-1])
            else:
                st.text('Nenhum comando foi enviado')

        # Atualiza a p√°gina automaticamente
        self.autorefresh = st_autorefresh(interval=2000, key="mqtt")

def main():
    """
    Fun√ß√£o principal que cria uma inst√¢ncia da classe Aplicativo e inicia a aplica√ß√£o.
    """
    # Inst√¢ncia da classe
    app_instance = Aplicativo(
        titulo='Projeto AI URA',
        mensagem='Colaboratividade entre carrinho e drone usando intelig√™ncia artificial'
    )

if __name__ == "__main__":
    main()
